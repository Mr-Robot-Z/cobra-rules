<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
    <name value="Request的SSRF"/>
    <language value="java"/>
    <match mode="regex-only-match"><![CDATA[\.Get\(|\.Post\(|\.Put\(|\.Patch\(|\.Delete\(|\.Options\(|\.Trace\(]]></match>
    <match2  block="in-function-down"><![CDATA[org\.apache\.http\.client\.fluent\.Request]]></match2>  <!-- 全限定名-->
    <level value="6"/>
    <test>
        <case assert="true"><![CDATA[
            String url = request.getParameter("url");
            return Request.Get(url).execute().returnContent().toString();    //execute()方法真正执行请求
        ]]></case>

        <case assert="true"><![CDATA[
            String url = request.getParameter("url");
            req = Request.Get(url);
            req.execute();
            ]]></case>

        <case assert="false"><![CDATA[
            String url = request.getParameter("url");
            req.execute();  // execute在
            req = Request.Get(url);
        ]]></case>
    </test>
    <solution>
        ## 安全风险
        SSRF漏洞(Server-Side Request Forgery)

        ### 形成原理
        SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。

        ### 风险
        1、攻击者可以对外网、服务器所在内网、本地进行端口扫描，获取服务的banner信息。
        2、攻击运行在内网或本地的应用程序。
        3、对内网web应用进行指纹识别。
        4、攻击内外网的web应用。
        5、利用file协议读取本地文件等。
    </solution>
    <status value="on"/>
    <author name="77" email="77caikiki@gmail.com"/>
</cobra>
