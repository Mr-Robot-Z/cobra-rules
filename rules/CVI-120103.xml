<?xml version="1.0" encoding="UTF-8"?>
<cobra document="https://github.com/WhaleShark-Team/cobra">
        <name value="URL#openStream/getContent的SSRF"/>
    <language value="java"/>
    <match mode="regex-only-match"><![CDATA[new\s*URL\(.*\)]]></match> <!-- 先判断new URL的参数可控-->
    <match2  block="in-function-down"><![CDATA[\.openStream\(|\.getContent\(]]></match2>  <!-- 发起HTTP/DNS请求-->
    <level value="6"/>
    <test>
        <case assert="true"><![CDATA[
            String url = request.getParameter("url");
            InputStream inputStream = null;
            URL u = new URL(url);
            inputStream = u.openStream(); // 发起请求
        ]]></case>
        <case assert="true"><![CDATA[
            String url = request.getParameter("url");
            InputStream inputStream = null;
            URL u = new URL(url);
            inputStream = u.getContent(); // 发起请求
        ]]></case>
        <case assert="false"><![CDATA[
            String url = request.getParameter("url");
            URL u = new URL(url);
            URLConnection urlConnection = u.openConnection();
        ]]></case>
    </test>
    <solution>
        ## 安全风险
        SSRF漏洞(Server-Side Request Forgery)

        ### 形成原理
        SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。

        ### 风险
        1、攻击者可以对外网、服务器所在内网、本地进行端口扫描，获取服务的banner信息。
        2、攻击运行在内网或本地的应用程序。
        3、对内网web应用进行指纹识别。
        4、攻击内外网的web应用。
        5、利用file协议读取本地文件等。
    </solution>
    <status value="on"/>
    <author name="77" email="feei@feei.cn"/>
</cobra>
